{"version":3,"sources":["helpers.js","App.js","reportWebVitals.js","index.js"],"names":["formatTime","time","min","Math","trunc","sec","PAINEL","LETTERS","StartPainel","level","controlLevel","timeMemo","timeRecall","onRight","numberAttempts","className","onClick","MemoPainel","letterPairs","map","item","RecallPainel","pairsToCheck","setPairsToCheck","type","value","onChange","e","target","toUpperCase","autoFocus","CheckPainel","answers","arrPairsToCheck","split","counter","redStyle","borderColor","color","greenStyle","style","App","useState","setLevel","setTimeMemo","setTimeRecall","onMemo","setOnMemo","onRecall","setOnRecall","onCheck","setOnCheck","painel","setPainel","setLetterPairs","setAnswers","setOnRight","setNumberAttempts","startPainelMemo","controlLetterPairs","memoTimer","amount","arrOfPairs","randomIndex","max","arrRandoms","random","floor","some","push","length","generateRandom","i","pair","duration","interval","setInterval","localStorage","clear","setItem","clearInterval","getItem","startPainelCheck","startCheckMemo","recallTimer","increaseAttempts","tempArrAwnsers","replace","match","join","every","prev","interval2","controlPainel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3633e0db.chunk.js","sourcesContent":["export const formatTime = (time) => {\r\n    let min = Math.trunc(time / 60);\r\n    let sec = time % 60;\r\n    return(\r\n      (min < 10 ? \"0\" + min : min) + \":\" + \r\n      (sec < 10 ? \"0\" + sec : sec)\r\n    );\r\n  }\r\n\r\nexport const generateRandom = (amount, max) => {\r\n  let arrRandoms = [];\r\n  while (arrRandoms.length < amount){\r\n    let random = Math.floor(Math.random() * max);\r\n    if (!arrRandoms.some(item => item === random)){\r\n      arrRandoms.push(random);\r\n    }\r\n  }\r\n  return arrRandoms;\r\n} \r\n","import './App.css';\nimport {useState} from \"react\";\nimport {formatTime, generateRandom} from \"./helpers.js\"\n\nconst PAINEL = [\"start\", \"memorized\", \"check\", \"do again\"];\nconst LETTERS = \"ABCDEFGJKLMNOPQRSTUVWX\";\n\nfunction App() {\n  const [level, setLevel] = useState(1);\n  const [timeMemo, setTimeMemo] = useState(0);\n  const [timeRecall, setTimeRecall] = useState(0);\n  const [onMemo, setOnMemo] = useState(false);\n  const [onRecall, setOnRecall] = useState(false);\n  const [onCheck, setOnCheck] = useState(false);\n  const [painel, setPainel] = useState(PAINEL[0]);\n  const [letterPairs, setLetterPairs] = useState([]);\n  const [pairsToCheck, setPairsToCheck] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [onRight, setOnRight] = useState(null);\n  const [numberAttempts, setNumberAttempts] = useState(0);\n\n  // CONTROL PAINEL\n  const controlPainel = () => {\n    switch (painel){\n      case PAINEL[0]:\n        setPainel(PAINEL[1]); // preparer next painel\n        setOnMemo(true); // display cards to memo\n        setTimeMemo(0); // make sure time memo is 0\n        setTimeRecall(0); // make sure time recall is 0\n        startPainelMemo(); // start the timer and the function going take the cards to display\n        break;\n      case PAINEL[1]:\n        setPainel(PAINEL[2]); // preparer next painel\n        setOnMemo(false); // turn off memo painel\n        setOnRecall(true); // display recall painel\n        memoTimer(); // stop memo timer\n        recallTimer(); // start recall timer\n        break;\n      case PAINEL[2]:\n        setPainel(PAINEL[3]); // preparer next painel\n        setOnCheck(true); // display check painel\n        setOnRecall(false); // turn off the recall painel\n        startPainelCheck(); // function to check the answers from previous painel with the cards from memo painel\n        break;\n      case PAINEL[3]:\n        setPainel(PAINEL[0]); // display the home painel\n        setOnCheck(false); // turn off the check painel\n        setAnswers([]); // make sure the array of aswers to next try is empty\n        setPairsToCheck(\"\"); // make sure the string with aswers is empty to next try\n        break;\n      default:\n        setPainel(PAINEL[0]);\n        setOnCheck(false);\n        setOnMemo(false);\n        setOnRecall(false);\n    }\n  }\n\n  // START PAINEL\n  // function to change the level/ number of cards to display in the memo painel\n  const controlLevel = (amount) =>{\n    if (level >= 1 && level <= 11){\n      if (level === 1 && amount < 0){\n        return\n      } else if (level === 11 && amount > 0){\n        return\n      } else {\n      setLevel(prev => prev + amount);\n      }\n    }\n  }\n\n  // MEMORIZATION PAINEL\n  const startPainelMemo = () => {\n    controlLetterPairs();\n    memoTimer();\n  }\n\n  // function to generate ther cards to display\n  const controlLetterPairs = () => {\n    let amount = level * 2;\n    let arrOfPairs = [];\n    let randomIndex = generateRandom(amount, LETTERS.length);\n    for (let i = 0; i < amount; i += 2){\n      let pair = LETTERS[randomIndex[i]]+LETTERS[randomIndex[i+1]];\n      arrOfPairs.push(pair)\n    }\n    setLetterPairs(arrOfPairs);\n  }\n\n  // function to start/stop and time the memorization\n  const memoTimer = () => {\n    let duration = timeMemo;\n    if (!onMemo){\n      let interval = setInterval(()=>{\n        duration++;\n        setTimeMemo(duration);\n      }, 1000);\n      localStorage.clear();\n      localStorage.setItem(\"intervalId\", interval);\n    }\n    if(onMemo){\n      clearInterval(localStorage.getItem(\"intervalId\"));\n    }\n  }\n  \n  // CHECK PAINEL\n  const startPainelCheck = () => {\n    startCheckMemo();\n    recallTimer();\n    increaseAttempts();\n  }\n\n  // check if the aswers stored in the paisToCheck it's right, doing a array with the string\n  const startCheckMemo = () =>{\n    let tempArrAwnsers = [];\n    let tempPairsToCheck = pairsToCheck.replace(/\\s+/g, \"\");\n    let arrPairsToCheck = tempPairsToCheck.match(/.{1,2}/g);\n    if (arrPairsToCheck === null){\n      level > 1 ? setLevel(prev => prev - 1) : setLevel(level);\n      return\n    } else {\n      for (let i in letterPairs){\n        if (letterPairs[i] === arrPairsToCheck[i]){\n          tempArrAwnsers.push(true);\n        } else {\n          tempArrAwnsers.push(false);\n        }\n      }\n      setAnswers(tempArrAwnsers);\n      setPairsToCheck(arrPairsToCheck.join(\" \"));\n      if (arrPairsToCheck.length === letterPairs.length && tempArrAwnsers.every(item => item)){\n        level < 11 ? setLevel(prev => prev + 1) : setLevel(level);\n        setOnRight(true);\n      } else {\n        level > 1 ? setLevel(prev => prev - 1) : setLevel(level);\n        setOnRight(false);\n      }\n    }\n }\n\n // function to start/stopn and time the memorization\n const recallTimer = () => {\n  let duration = timeRecall;\n  if (!onRecall){\n    let interval2 = setInterval(()=>{\n      duration++;\n      setTimeRecall(duration);\n    }, 1000);\n    localStorage.clear();\n    localStorage.setItem(\"intervalId2\", interval2);\n  }\n  if(onRecall){\n    clearInterval(localStorage.getItem(\"intervalId2\"));\n  }\n }\n\n// count the number of try in this session, recall the page set this to 0\n const increaseAttempts = () =>{\n   setNumberAttempts(prev => prev + 1);\n }\n\n  return (\n    <div className=\"painel center-align\">\n      <h4><u>LetterPair Memory Trainer</u></h4>\n      {\n      onMemo? <MemoPainel level={level} letterPairs={letterPairs}/> \n      : onRecall ? <RecallPainel pairsToCheck={pairsToCheck} setPairsToCheck={setPairsToCheck}/>\n      : onCheck ? <CheckPainel answers={answers} pairsToCheck={pairsToCheck} letterPairs={letterPairs}/>\n      : <StartPainel numberAttempts={numberAttempts} onRight={onRight} timeMemo={timeMemo} timeRecall={timeRecall} level={level} controlLevel={controlLevel}/> \n      }\n      <br/>\n      <button onClick={() => controlPainel()} className=\"btn-large\">{painel}</button>\n      {!onMemo && !onRecall && !onCheck ? <h6>by Willian Pessoa</h6> : <h6></h6>}\n    </div>\n  );\n}\n\nfunction StartPainel({level, controlLevel, timeMemo, timeRecall, onRight, numberAttempts}) {\n  return(\n    <div className=\"painel-start\">\n      <h5>Put Your Desire Level (Max 11)</h5>\n      <div className=\"painel-level\">\n        <button onClick={()=>controlLevel(-1)} className=\"waves-effect waves-light btn-large\">\n          <i className=\"material-icons\">arrow_downward</i>\n        </button>\n        <div className=\"level-display\"><h1>{level}</h1></div>\n        <button onClick={()=>controlLevel(1)} className=\"waves-effect waves-light btn-large\">\n          <i className=\"material-icons\">arrow_upward</i>\n        </button>\n      </div>\n      <div>\n        <h5>Number Attempts: {numberAttempts}</h5>\n        <h5>Last Result: {onRight === null ? \"Unkown\" : onRight ? \"Right\" : \"Wrong\"}</h5>\n        <h5>Last Time Memo: {formatTime(timeMemo)}</h5>\n        <h5>Last Time Recall: {formatTime(timeRecall)}</h5>\n      </div>\n    </div>\n  );\n}\n\nfunction MemoPainel({letterPairs}){\n  return(\n    <div className=\"grid-pairs\">\n      {letterPairs.map(item => {\n        return <div className=\"letter-pair\">{item}</div>;\n      })}\n    </div>\n  );\n}\n\nfunction RecallPainel({pairsToCheck, setPairsToCheck}){\n  return(\n    <div>\n    <h5>{\"Put the pairs in the right order using space between them:\"}</h5>\n    <br/>\n    <input type=\"text\" value={pairsToCheck} onChange={e => setPairsToCheck(e.target.value.toUpperCase())} autoFocus></input>\n    </div>\n  );\n}\n\nfunction CheckPainel({letterPairs, answers, pairsToCheck}){\n\n  let arrPairsToCheck = pairsToCheck.split(\" \");\n  let counter = -1;\n  const redStyle = {borderColor: \"red\", color: \"red\"};\n  const greenStyle = {borderColor: \"#64dd17\", color: \"#64dd17\"};\n\n  return(\n    <div>\n    <div className=\"grid-pairs\">\n      {letterPairs.map(item => {\n        return <div className=\"letter-pair\">{item}</div>;\n      })}\n    </div>\n    <div className=\"grid-pairs\">\n    {arrPairsToCheck.map(item => {\n        counter++;\n        return <div style={answers[counter] ? greenStyle : redStyle} className=\"letter-pair\">{item}</div>;\n      })}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}